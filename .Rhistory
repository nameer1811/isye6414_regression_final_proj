# Plot 3: Scale-Location plot (another check for homoscedasticity)
plot(mlr_model_cluster, which = 3, main = "Scale-Location Plot (with Clusters)")
# Plot 4: Residuals vs. Leverage (to identify influential points)
plot(mlr_model_cluster, which = 5, main = "Residuals vs. Leverage (with Clusters)")
renv::install("skimr")
skimr::skim(student_debt_data)
skimr::skim(student_debt_data)
skimr::skim(student_debt_data %>% mutate(across(race_two_or_more:race_other, ~log(.))))
View(student_debt_data)
summary(mlr_model_cluster)
stepwise <- step(mlr_model_cluster, direction = "both")
summary(stepwise)
skimr::skim(student_debt_data %>% mutate(across(race_two_or_more:race_other, ~sqrt(.))))
skimr::skim(student_debt_data %>% mutate(across(race_two_or_more:race_other, ~sqrt(.))))
skimr::skim(student_debt_data)
skimr::skim(student_debt_data %>% mutate(across(race_two_or_more:race_other, ~(.^(1/3)))))
hist(student_debt_data$total_balance_billions)
summary(student_debt_data$total_balance_billions)
# Prepare state-level data for clustering
# We'll use the mean of all numeric features (excluding response and year) for each state
# to define state characteristics for clustering.
state_features_for_clustering <- student_debt_data %>%
group_by(state) %>%
summarise(
across(
.cols = -c(year), # Exclude year, response, and highly correlated predictor
.fns = mean,
na.rm = TRUE
),
.groups = "drop"
)
# Handle any remaining NAs in the state_features_for_clustering (e.g., states with all NAs for a feature)
# For simplicity, we'll omit rows with NAs for clustering. In a real scenario, consider imputation.
state_features_for_clustering_clean <- na.omit(state_features_for_clustering)
# Store state names for mapping back
state_names_for_clustering <- state_features_for_clustering_clean$state
# Select only numeric columns for scaling and clustering
numeric_state_features <- state_features_for_clustering_clean %>%
select(where(is.numeric))
# Scale the numeric features (important for K-means)
scaled_state_features <- scale(numeric_state_features)
k_clusters <- 5 # Example: Chosen number of clusters
# Perform K-means clustering
set.seed(100) # for reproducibility of clustering
kmeans_result <- kmeans(scaled_state_features, centers = k_clusters, nstart = 25)
# Create a dataframe of state and their cluster assignments
state_cluster_map <- data.frame(
state = state_names_for_clustering,
state_cluster = as.factor(kmeans_result$cluster) # Convert cluster numbers to factor
)
cat(paste0("K-means clustering performed with K = ", k_clusters, " clusters.\n"))
cat("\nFirst few rows of State-to-Cluster mapping:\n")
state_cluster_map
combined_data_with_clusters <- student_debt_data %>%
left_join(state_cluster_map, by = "state")
state_cluster_map
table(state_cluster_map)
combined_data_with_clusters <- student_debt_data %>%
left_join(state_cluster_map, by = "state")
view(combined_data_with_clusters)
View(combined_data_with_clusters)
social_char_data <- load_and_combine_data("data/social_char") %>%
rename(average_household_size = estimate_households_by_type_total_households_average_household_size,
total_veteran_eligible = estimate_veteran_status_civilian_population_18_years_and_over,
total_veteran = estimate_veteran_status_civilian_population_18_years_and_over_civilian_veterans,
total_population_degree = estimate_educational_attainment_population_25_years_and_over,
total_population_bachelors_degree = estimate_educational_attainment_population_25_years_and_over_bachelor_s_degree_or_higher,
total_foreign_born_pop = estimate_u_s_citizenship_status_foreign_born_population,
total_households = estimate_households_by_type_total_households,
total_household_w_internet = estimate_computers_and_internet_use_total_households_with_a_broadband_internet_subscription) %>%
select(-contains("estimate")) %>%
group_by(state, year) %>%
summarise(across(-average_household_size, ~sum(., na.rm=TRUE)),
average_household_size = mean(average_household_size, na.rm=TRUE)) %>%
ungroup() %>%
mutate(total_vetetan = total_veteran/total_veteran_eligible,
total_population_bachelors_degree = total_population_bachelors_degree/total_population_degree,
total_household_w_internet = total_household_w_internet/total_households) %>%
select(-c(total_veteran_eligible, total_population_degree, total_households))
library(dplyr)
library(janitor)
library(purrr)
library(glue)
library(stringr)
library(readxl)
load_and_combine_data <- function(directory_path) {
file_pattern <- glue(".*-Data\\.csv$")
file_paths <- list.files(path = directory_path, pattern = file_pattern, full.names = TRUE)
list_of_dfs <- map(file_paths, function(path) {
year_match_result <- regmatches(path, regexpr("Y(\\d{4})\\.*", path))
year_extracted <- sub("Y(\\d{4})\\.*", "\\1", year_match_result)
read.csv(path, skip = 1, na.strings = c("N", "-", "(X)", "null")) %>%
clean_names() %>%
mutate(year = as.numeric(year_extracted)) %>%
mutate(state = str_trim(str_extract(geographic_area_name, ",\\s*([^,]+)$"), side = "left"),
state = str_replace(state, "^,\\s*", "")) %>%
select(-contains(c("margin_of_error", "ratio", "unit", "percent", "x", "geograph")))
}
)
common_columns <- names(list_of_dfs[[1]])
for (i in 2:length(list_of_dfs)) {
common_columns <- intersect(common_columns, names(list_of_dfs[[i]]))
}
list_of_dfs_common_cols <- map(list_of_dfs, ~ .x %>% select(all_of(common_columns)))
for (col_name in common_columns) {
first_col_type <- class(list_of_dfs_common_cols[[1]][[col_name]])
if (first_col_type %in% c("numeric", "integer")) {
list_of_dfs_common_cols <- map(list_of_dfs_common_cols, function(df) {
df[[col_name]] <- as.numeric(df[[col_name]])
df
})
} else if (first_col_type == "factor") {
list_of_dfs_common_cols <- map(list_of_dfs_common_cols, function(df) {
df[[col_name]] <- as.character(df[[col_name]])
df
})
}
}
yearly_data <- bind_rows(list_of_dfs_common_cols)
yearly_data
}
load_and_combine_borrower_data <- function(filepath, sheet_numbers, years) {
combined_borrower_data <- map2_df(sheet_numbers, years, function(sheet, year) {
read_excel(filepath, sheet = sheet, skip = 7) %>%
clean_names() %>%
mutate(year = year)
})
final_borrower_data <- combined_borrower_data %>%
select(state, year, total_borrowers, total_balance_billions)
final_borrower_data
}
dem_data <- load_and_combine_data("data/dem") %>%
rename(total_population = estimate_race_total_population,
race_white = estimate_race_total_population_one_race_white,
race_black = estimate_race_total_population_one_race_black_or_african_american,
race_asian = estimate_race_total_population_one_race_asian,
race_native = estimate_race_total_population_one_race_american_indian_and_alaska_native,
race_pacific_islander = estimate_race_total_population_one_race_native_hawaiian_and_other_pacific_islander,
race_other = estimate_race_total_population_one_race_some_other_race,
race_two_or_more = estimate_race_total_population_two_or_more_races,
hispanic_or_latino = estimate_hispanic_or_latino_and_race_total_population_hispanic_or_latino_of_any_race,
total_18_or_over_population = estimate_citizen_voting_age_population_citizen_18_and_over_population,
population_18_or_over_male = estimate_citizen_voting_age_population_citizen_18_and_over_population_male,
population_18_or_over_female = estimate_citizen_voting_age_population_citizen_18_and_over_population_female) %>%
select(-contains("estimate")) %>%
group_by(state, year) %>%
summarise(across(everything(), ~sum(., na.rm=TRUE))) %>%
ungroup() %>%
mutate(across(race_two_or_more:hispanic_or_latino, ~./total_population),
across(population_18_or_over_male:population_18_or_over_female, ~./total_18_or_over_population))
economic_data <- load_and_combine_data("data/economic") %>%
rename(employment_total = estimate_employment_status_population_16_years_and_over,
employement_total_employed = estimate_employment_status_population_16_years_and_over_in_labor_force,
employment_total_unemployed = estimate_employment_status_population_16_years_and_over_not_in_labor_force) %>%
select(-contains("estimate"))  %>%
group_by(state, year) %>%
summarise(across(everything(), ~sum(., na.rm=TRUE))) %>%
ungroup() %>%
mutate(across(employement_total_employed:employment_total_unemployed, ~./employment_total)) %>%
select(-employment_total)
mean_income_data <- load_and_combine_data("data/mean_income") %>%
group_by(state, year) %>%
summarise(mean_household_income_dollars = mean(estimate_mean_income_dollars_household_income_all_households, na.rm=TRUE)) %>%
ungroup()
social_char_data <- load_and_combine_data("data/social_char") %>%
rename(average_household_size = estimate_households_by_type_total_households_average_household_size,
total_veteran_eligible = estimate_veteran_status_civilian_population_18_years_and_over,
total_veteran = estimate_veteran_status_civilian_population_18_years_and_over_civilian_veterans,
total_population_degree = estimate_educational_attainment_population_25_years_and_over,
total_population_bachelors_degree = estimate_educational_attainment_population_25_years_and_over_bachelor_s_degree_or_higher,
total_foreign_born_pop = estimate_u_s_citizenship_status_foreign_born_population,
total_households = estimate_households_by_type_total_households,
total_household_w_internet = estimate_computers_and_internet_use_total_households_with_a_broadband_internet_subscription) %>%
select(-contains("estimate")) %>%
group_by(state, year) %>%
summarise(across(-average_household_size, ~sum(., na.rm=TRUE)),
average_household_size = mean(average_household_size, na.rm=TRUE)) %>%
ungroup() %>%
mutate(total_vetetan = total_veteran/total_veteran_eligible,
total_population_bachelors_degree = total_population_bachelors_degree/total_population_degree,
total_household_w_internet = total_household_w_internet/total_households) %>%
select(-c(total_veteran_eligible, total_population_degree, total_households))
borrower_data <-load_and_combine_borrower_data("data/Student-loan-update-2025-Mangrum.xlsx", 11:15, 2019:2023)
combined_data <- dem_data %>%
left_join(economic_data, by = c("state", "year")) %>%
left_join(mean_income_data, by = c("state", "year")) %>%
left_join(social_char_data, by = c("state", "year")) %>%
left_join(borrower_data, by = c("state", "year")) %>%
relocate(state, year) %>%
filter(!state == "Puerto Rico", !state == "District of Columbia") %>%
mutate(total_foreign_born_pop = total_foreign_born_pop/total_population,
total_borrowers = total_borrowers/total_18_or_over_population) %>%
select(-c(total_population, total_18_or_over_population))
combined_data %>%
select(-state, -year) %>%
gtsummary::tbl_summary()
write.csv(combined_data, "data/combined_clean_data.csv", row.names = FALSE)
library(dplyr)
library(janitor)
library(purrr)
library(glue)
library(stringr)
library(readxl)
load_and_combine_data <- function(directory_path) {
file_pattern <- glue(".*-Data\\.csv$")
file_paths <- list.files(path = directory_path, pattern = file_pattern, full.names = TRUE)
list_of_dfs <- map(file_paths, function(path) {
year_match_result <- regmatches(path, regexpr("Y(\\d{4})\\.*", path))
year_extracted <- sub("Y(\\d{4})\\.*", "\\1", year_match_result)
read.csv(path, skip = 1, na.strings = c("N", "-", "(X)", "null")) %>%
clean_names() %>%
mutate(year = as.numeric(year_extracted)) %>%
mutate(state = str_trim(str_extract(geographic_area_name, ",\\s*([^,]+)$"), side = "left"),
state = str_replace(state, "^,\\s*", "")) %>%
select(-contains(c("margin_of_error", "ratio", "unit", "percent", "x", "geograph")))
}
)
common_columns <- names(list_of_dfs[[1]])
for (i in 2:length(list_of_dfs)) {
common_columns <- intersect(common_columns, names(list_of_dfs[[i]]))
}
list_of_dfs_common_cols <- map(list_of_dfs, ~ .x %>% select(all_of(common_columns)))
for (col_name in common_columns) {
first_col_type <- class(list_of_dfs_common_cols[[1]][[col_name]])
if (first_col_type %in% c("numeric", "integer")) {
list_of_dfs_common_cols <- map(list_of_dfs_common_cols, function(df) {
df[[col_name]] <- as.numeric(df[[col_name]])
df
})
} else if (first_col_type == "factor") {
list_of_dfs_common_cols <- map(list_of_dfs_common_cols, function(df) {
df[[col_name]] <- as.character(df[[col_name]])
df
})
}
}
yearly_data <- bind_rows(list_of_dfs_common_cols)
yearly_data
}
load_and_combine_borrower_data <- function(filepath, sheet_numbers, years) {
combined_borrower_data <- map2_df(sheet_numbers, years, function(sheet, year) {
read_excel(filepath, sheet = sheet, skip = 7) %>%
clean_names() %>%
mutate(year = year)
})
final_borrower_data <- combined_borrower_data %>%
select(state, year, total_borrowers, total_balance_billions)
final_borrower_data
}
dem_data <- load_and_combine_data("data/dem") %>%
rename(total_population = estimate_race_total_population,
race_white = estimate_race_total_population_one_race_white,
race_black = estimate_race_total_population_one_race_black_or_african_american,
race_asian = estimate_race_total_population_one_race_asian,
race_native = estimate_race_total_population_one_race_american_indian_and_alaska_native,
race_pacific_islander = estimate_race_total_population_one_race_native_hawaiian_and_other_pacific_islander,
race_other = estimate_race_total_population_one_race_some_other_race,
race_two_or_more = estimate_race_total_population_two_or_more_races,
hispanic_or_latino = estimate_hispanic_or_latino_and_race_total_population_hispanic_or_latino_of_any_race,
total_18_or_over_population = estimate_citizen_voting_age_population_citizen_18_and_over_population,
population_18_or_over_male = estimate_citizen_voting_age_population_citizen_18_and_over_population_male,
population_18_or_over_female = estimate_citizen_voting_age_population_citizen_18_and_over_population_female) %>%
select(-contains("estimate")) %>%
group_by(state, year) %>%
summarise(across(everything(), ~sum(., na.rm=TRUE))) %>%
ungroup() %>%
mutate(across(race_two_or_more:hispanic_or_latino, ~./total_population),
across(population_18_or_over_male:population_18_or_over_female, ~./total_18_or_over_population))
economic_data <- load_and_combine_data("data/economic") %>%
rename(employment_total = estimate_employment_status_population_16_years_and_over,
employement_total_employed = estimate_employment_status_population_16_years_and_over_in_labor_force,
employment_total_unemployed = estimate_employment_status_population_16_years_and_over_not_in_labor_force) %>%
select(-contains("estimate"))  %>%
group_by(state, year) %>%
summarise(across(everything(), ~sum(., na.rm=TRUE))) %>%
ungroup() %>%
mutate(across(employement_total_employed:employment_total_unemployed, ~./employment_total)) %>%
select(-employment_total)
mean_income_data <- load_and_combine_data("data/mean_income") %>%
group_by(state, year) %>%
summarise(mean_household_income_dollars = mean(estimate_mean_income_dollars_household_income_all_households, na.rm=TRUE)) %>%
ungroup()
social_char_data <- load_and_combine_data("data/social_char") %>%
rename(average_household_size = estimate_households_by_type_total_households_average_household_size,
total_veteran_eligible = estimate_veteran_status_civilian_population_18_years_and_over,
total_veteran = estimate_veteran_status_civilian_population_18_years_and_over_civilian_veterans,
total_population_degree = estimate_educational_attainment_population_25_years_and_over,
total_population_bachelors_degree = estimate_educational_attainment_population_25_years_and_over_bachelor_s_degree_or_higher,
total_foreign_born_pop = estimate_u_s_citizenship_status_foreign_born_population,
total_households = estimate_households_by_type_total_households,
total_household_w_internet = estimate_computers_and_internet_use_total_households_with_a_broadband_internet_subscription) %>%
select(-contains("estimate")) %>%
group_by(state, year) %>%
summarise(across(-average_household_size, ~sum(., na.rm=TRUE)),
average_household_size = mean(average_household_size, na.rm=TRUE)) %>%
ungroup() %>%
mutate(total_veteran = total_veteran/total_veteran_eligible,
total_population_bachelors_degree = total_population_bachelors_degree/total_population_degree,
total_household_w_internet = total_household_w_internet/total_households) %>%
select(-c(total_veteran_eligible, total_population_degree, total_households))
borrower_data <-load_and_combine_borrower_data("data/Student-loan-update-2025-Mangrum.xlsx", 11:15, 2019:2023)
combined_data <- dem_data %>%
left_join(economic_data, by = c("state", "year")) %>%
left_join(mean_income_data, by = c("state", "year")) %>%
left_join(social_char_data, by = c("state", "year")) %>%
left_join(borrower_data, by = c("state", "year")) %>%
relocate(state, year) %>%
filter(!state == "Puerto Rico", !state == "District of Columbia") %>%
mutate(total_foreign_born_pop = total_foreign_born_pop/total_population,
total_borrowers = total_borrowers/total_18_or_over_population) %>%
select(-c(total_population, total_18_or_over_population))
combined_data %>%
select(-state, -year) %>%
gtsummary::tbl_summary()
write.csv(combined_data, "data/combined_clean_data.csv", row.names = FALSE)
student_debt_data <- read.csv("data/combined_clean_data.csv")
# Prepare state-level data for clustering
# We'll use the mean of all numeric features (excluding response and year) for each state
# to define state characteristics for clustering.
state_features_for_clustering <- student_debt_data %>%
group_by(state) %>%
summarise(
across(
.cols = -c(year), # Exclude year, response, and highly correlated predictor
.fns = mean,
na.rm = TRUE
),
.groups = "drop"
)
# Handle any remaining NAs in the state_features_for_clustering (e.g., states with all NAs for a feature)
# For simplicity, we'll omit rows with NAs for clustering. In a real scenario, consider imputation.
state_features_for_clustering_clean <- na.omit(state_features_for_clustering)
# Store state names for mapping back
state_names_for_clustering <- state_features_for_clustering_clean$state
# Select only numeric columns for scaling and clustering
numeric_state_features <- state_features_for_clustering_clean %>%
select(where(is.numeric))
# Scale the numeric features (important for K-means)
scaled_state_features <- scale(numeric_state_features)
k_clusters <- 5 # Example: Chosen number of clusters
# Perform K-means clustering
set.seed(100) # for reproducibility of clustering
kmeans_result <- kmeans(scaled_state_features, centers = k_clusters, nstart = 25)
# Create a dataframe of state and their cluster assignments
state_cluster_map <- data.frame(
state = state_names_for_clustering,
state_cluster = as.factor(kmeans_result$cluster) # Convert cluster numbers to factor
)
cat(paste0("K-means clustering performed with K = ", k_clusters, " clusters.\n"))
cat("\nFirst few rows of State-to-Cluster mapping:\n")
table(state_cluster_map)
combined_data_with_clusters <- student_debt_data %>%
left_join(state_cluster_map, by = "state")
set.seed(100) # for reproducibility
train_idx <- sample(seq_len(nrow(combined_data_with_clusters)), size = floor(0.8 * nrow(combined_data_with_clusters)))
train_data_cluster <- combined_data_with_clusters[train_idx, ]
test_data_cluster <- combined_data_with_clusters[-train_idx, ]
train_data_cluster %>%
select(-state) %>%
tbl_summary()
train_data <- train_data_cluster %>%
select(-state, -year)
mlr_model_cluster <- lm(log(total_balance_billions) ~ ., data = train_data)
summary(mlr_model_cluster)
mlr_model_cluster <- lm(total_balance_billions ~ ., data = train_data)
summary(mlr_model_cluster)
View(train_data_cluster)
train_data <- train_data_cluster %>%
select(-state, -year, -race_other, -population_18_or_over_female, -employment_total_unemployed)
mlr_model_cluster <- lm(total_balance_billions ~ ., data = train_data)
summary(mlr_model_cluster)
mlr_model_minimum <- lm(total_balance_billions ~ 1, data=train_data)
stepwise <- step(minimum, scope = list(lower = mlr_model_minimum, upper = mlr_model_cluster), direction = "both", trace=FALSE)
stepwise <- step(mlr_model_minimum, scope = list(lower = mlr_model_minimum, upper = mlr_model_cluster), direction = "both", trace=FALSE)
summary(stepwise)
stepwise <- step(mlr_model_minimum, scope = list(lower = mlr_model_minimum, upper = mlr_model_cluster), direction = "forward", trace=FALSE)
summary(stepwise)
stepwise <- step(mlr_model_cluster, scope = list(lower = mlr_model_minimum, upper = mlr_model_cluster), direction = "forward", trace=T)
summary(stepwise)
mlr_model_cluster <- lm(total_balance_billions ~ ., data = train_data_cluster)
summary(mlr_model_cluster)
all_var <- model.matrix(RemoteWorkPreference ~ . -1, data = train_data)
all_var <- model.matrix(total_balance_billions ~ . -1, data = train_data)
elastic_net_model_cv <- glmnet::cv.glmnet(all_var, total_balance_billions, family='gaussian', alpha=0.5, nfolds=10)
renv::install("glmnet")
elastic_net_model_cv <- glmnet::cv.glmnet(all_var, total_balance_billions, family='gaussian', alpha=0.5, nfolds=10)
elastic_net_model_cv <- glmnet::cv.glmnet(all_var, train_data$total_balance_billions, family='gaussian', alpha=0.5, nfolds=10)
elastic_net_model <- glmnet::glmnet(all_var, train_data$total_balance_billions, family='gaussian',alpha=1, nlambda=100)
summary(elastic_net_model)
round(elastic_net_model_cv$lambda.min,4)
as.data.frame(as.matrix(coef(elastic_net_model, s=elastic_net_model_cv$lambda.min))) %>%
filter(s0 != 0) %>%
rownames()
plot(elastic_net_model, xvar="lambda", lwd=2)
abline(v=log(elastic_net_model_cv$lambda.min), col='red', lty=2, lwd=2)
file_pattern <- glue(".*-Data\\.csv$")
file_paths <- list.files(path = "data/dem", pattern = file_pattern, full.names = TRUE)
file_paths
packageVersion("Rcpp")
predict(mlr_model, test_data, type='response')
student_debt_data <- read.csv("data/combined_clean_data.csv")
train_idx <- sample(seq_len(nrow(student_debt_data)), size = floor(0.8 * nrow(borrower_data)))
train_data <- student_debt_data[train_idx, ]
test_data <- student_debt_data[-train_idx, ]
train_data %>%
select(-state, -year) %>%
tbl_summary() %>%
print()
train_data$state <- as.factor(train_data$state)
mlr_model <- lm(total_balance_billions ~ . -year, data = train_data)
summary(mlr_model)
predict(mlr_model, test_data, type='response')
mlr_predict <- predict(mlr_model, test_data, type='response')
cbind(test_data$total_balance_billions, mlr_predict)
cbind(test_data$state,test_data$total_balance_billions, mlr_predict)
cbind(state = test_data$state, actual_borrowed = test_data$total_balance_billions, predicted_borrowed = mlr_predict)
as.data.frame(cbind(state = test_data$state, actual_borrowed = test_data$total_balance_billions, predicted_borrowed = mlr_predict))
View(as.data.frame(cbind(state = test_data$state, actual_borrowed = test_data$total_balance_billions, predicted_borrowed = mlr_predict)))
View(as.data.frame(cbind(state = test_data$state, actual_borrowed = test_data$total_balance_billions, predicted_borrowed = rount(mlr_predict,2))))
View(as.data.frame(cbind(state = test_data$state, actual_borrowed = test_data$total_balance_billions, predicted_borrowed = round(mlr_predict,2))))
mlr_model_cluster <- lm(total_balance_billions ~ ., data = train_data)
summary(mlr_model_cluster)
mlr_predict_cluster <- predict(mlr_model_cluster, test_data, type='response')
View(as.data.frame(cbind(state = test_data_cluster$state, actual_borrowed = test_data_cluster$total_balance_billions, predicted_borrowed = round(mlr_predict_cluster,2))))
?sample
set.seed(123)
library(dplyr)
library(janitor)
library(purrr)
library(glue)
library(stringr)
library(readxl)
library(glmnet)
library(car)
renv::install("car")
student_debt_data <- read.csv("data/combined_clean_data.csv")
train_idx <- sample(seq_len(nrow(student_debt_data)), size = floor(0.8 * nrow(borrower_data)))
train_data <- student_debt_data[train_idx, ]
test_data <- student_debt_data[-train_idx, ]
# Prep train data
train_data <- train_data %>%
mutate(minority_share = 1 - race_white) %>%
select(-starts_with("race_")) %>%
select(-state, -year, -population_18_or_over_female, -employment_total_unemployed)
# Prepare test data
test_data <- test_data %>%
mutate(minority_share = 1 - race_white) %>%
select(-starts_with("race_")) %>%
select(-state, -year, -population_18_or_over_female, -employment_total_unemployed)
colnames(test_data)
colnames(train_data)
#mlr_model <- lm(total_balance_billions ~ . -year, data = train_data)
mlr_model <- lm(total_balance_billions ~ ., data = train_data)
summary(mlr_model)
vif(mlr_model)
library(dplyr)
library(janitor)
library(purrr)
library(glue)
library(stringr)
library(readxl)
library(glmnet)
library(car)
student_debt_data <- read.csv("data/combined_clean_data.csv")
train_idx <- sample(seq_len(nrow(student_debt_data)), size = floor(0.8 * nrow(borrower_data)))
train_data <- student_debt_data[train_idx, ]
test_data <- student_debt_data[-train_idx, ]
# Prep train data
train_data <- train_data %>%
mutate(minority_share = 1 - race_white) %>%
select(-starts_with("race_")) %>%
select(-state, -year, -population_18_or_over_female, -employment_total_unemployed)
# Prepare test data
test_data <- test_data %>%
mutate(minority_share = 1 - race_white) %>%
select(-starts_with("race_")) %>%
select(-state, -year, -population_18_or_over_female, -employment_total_unemployed)
colnames(test_data)
colnames(train_data)
#mlr_model <- lm(total_balance_billions ~ . -year, data = train_data)
mlr_model <- lm(total_balance_billions ~ ., data = train_data)
summary(mlr_model)
vif(mlr_model)
set.seed(123)
library(dplyr)
library(janitor)
library(purrr)
library(glue)
library(stringr)
library(readxl)
library(glmnet)
library(car)
student_debt_data <- read.csv("data/combined_clean_data.csv")
train_idx <- sample(seq_len(nrow(student_debt_data)), size = floor(0.8 * nrow(borrower_data)))
train_data <- student_debt_data[train_idx, ]
test_data <- student_debt_data[-train_idx, ]
# Prep train data
train_data <- train_data %>%
mutate(minority_share = 1 - race_white) %>%
select(-starts_with("race_")) %>%
select(-state, -year, -population_18_or_over_female, -employment_total_unemployed)
# Prepare test data
test_data <- test_data %>%
mutate(minority_share = 1 - race_white) %>%
select(-starts_with("race_")) %>%
select(-state, -year, -population_18_or_over_female, -employment_total_unemployed)
colnames(test_data)
colnames(train_data)
#mlr_model <- lm(total_balance_billions ~ . -year, data = train_data)
mlr_model <- lm(total_balance_billions ~ ., data = train_data)
summary(mlr_model)
vif(mlr_model)
